#!/usr/bin/php
<?php

require(__DIR__ . '/vendor/james-heinrich/getid3/getid3/getid3.php');
require(__DIR__ . '/vendor/james-heinrich/getid3/getid3/write.php');

ini_set("memory_limit", -1);
date_default_timezone_set('UTC');

$configFile = file_get_contents(__DIR__ . '/config.json');
$config = json_decode($configFile);

if (json_last_error() !== JSON_ERROR_NONE)
{
	throw new Exception('The config file is invalid.');
}

if (is_dir($config->output_dir . '/tracks') === false)
{
	mkdir($config->output_dir . '/tracks');
}

$clientID = $config->client_id;
$userID = (int)$config->user_id;
$apiURL = $config->api_url;

$trackLikes = file_get_contents(
	"{$config->api_url}/users/{$userID}/track_likes.json?client_id={$clientID}"
);
$trackLikes = json_decode($trackLikes);

// ID3
$id3 = new getID3();
$id3->setOption(array('encoding' => 'UTF-8'));

foreach($trackLikes as $like)
{
	$path = $config->output_dir . '/tracks/' . $like->track->user->permalink . ' - ' . $like->track->permalink . '.mp3';
	if (file_exists($path) === false)
	{
		if ($like->track->downloadable === true && isset($like->track->download_url) === true)
		{
			$s = file_get_contents("{$like->track->download_url}?client_id={$clientID}");
		}
		else
		{
			$s = file_get_contents("{$like->track->stream_url}?client_id={$clientID}");
		}
		if (count($s) > 0)
		{
			file_put_contents($path, $s);
		}
	}

	// Only write to non-downloadable tracks since these will already contain tags, hopefully.
	if ($like->track->downloadable === false)
	{
		$write = new getid3_writetags();
		$write->tagformats = array('id3v2.3');
		$write->overwrite_tags = true;
		$write->tag_encoding = 'UTF-8';
		$write->remove_other_tags = false;

		$data = array(
			'title'     	=> array($like->track->title),
			'artist'    	=> array($like->track->user->username),
			// 'album'     	=> array('Hotline Miami - Official Soundtrack'),
			'year'      	=> array(date('Y', strtotime($like->track->created_at))),
			'genre'     	=> array($like->track->genre),
			// 'track'     	=> array('20/22'),
			'url_file'  	=> array($like->track->permalink_url),
			'url_artist'	=> array($like->track->user->permalink_url)
		);
		$write->tag_data = $data;

		// Do the writing on a temp file and copy back on success
		$tmpPath = '/tmp/' . uniqid('scfd', true);
		$write->filename = $tmpPath;
		copy($path, $tmpPath);

		if ($write->WriteTags() === true)
		{
			rename($tmpPath, $path);
		}
		else
		{
			unlink($tmpPath);
			file_put_contents('debug.log', implode(', ', $write->errors) . PHP_EOL, FILE_APPEND);
		}
	}
}

$playlistLikes = file_get_contents("{$config->api_url}/users/{$userID}/playlist_likes.json?client_id={$clientID}");
$playlistLikes = json_decode($playlistLikes);

foreach($playlistLikes as $like)
{
	$dir = $config->output_dir .
		'/playlists/' .
		$like->playlist->user->permalink .
		' - ' .
		$like->playlist->permalink;

	if (is_dir($dir) === false){ mkdir($dir,0777,true); }

	$index = 0;
	foreach ($like->playlist->tracks as $track)
	{
		$path = $dir . '/' . $like->playlist->user->permalink . $track->permalink . '.mp3';
		if (file_exists($path) === false)
		{
			if ($track->downloadable === true && isset($track->download_url) === true)
			{
				$s = file_get_contents("{$track->download_url}?client_id={$clientID}");
			}
			else
			{
				$s = file_get_contents("{$track->stream_url}?client_id={$clientID}");
			}
			if (count($s) > 0)
			{
				file_put_contents($path, $s);
				echo $path . PHP_EOL;
			}
		}

		// Only write to non-downloadable tracks since these will already contain tags, hopefully.
		if ($track->downloadable === false)
		{
			$write = new getid3_writetags();
			$write->tagformats = array('id3v2.3');
			$write->overwrite_tags = true;
			$write->tag_encoding = 'UTF-8';
			$write->remove_other_tags = false;

			$data = array(
				'title'     	=> array($track->title),
				'artist'    	=> array($track->user->username),
				'album'     	=> array($like->playlist->title),
				'year'      	=> array(date('Y', strtotime($track->created_at))),
				'genre'     	=> array($track->genre),
				'track'     	=> array(($index + 1) . '/' . count($like->playlist->tracks)),
				'url_file'  	=> array($track->permalink_url),
				'url_artist'	=> array($track->user->permalink_url)
			);
			$write->tag_data = $data;

			// Do the writing on a temp file and copy back on success
			$tmpPath = '/tmp/' . uniqid('scfd', true);
			$write->filename = $tmpPath;
			copy($path, $tmpPath);

			if ($write->WriteTags() === true)
			{
				rename($tmpPath, $path);
			}
			else
			{
				unlink($tmpPath);
				file_put_contents('debug.log', implode(', ', $write->errors) . PHP_EOL, FILE_APPEND);
			}
		}
		$index++;
	}
}